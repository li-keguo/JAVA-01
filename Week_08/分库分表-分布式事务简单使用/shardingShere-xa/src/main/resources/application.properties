
mybatis.mapper-locations= classpath:/mapper/*.xml

# 配置真实数据源
spring.shardingsphere.datasource.names=ds0,ds1


spring.shardingsphere.datasource.common.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.common.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.common.username=root
spring.shardingsphere.datasource.common.password=xxx
#spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/test_db_01?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=true
#spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/test_db_02?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=true
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/xm_db_01?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=true
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://xxx.xxx.xxx.xxx:3306/xm_db_02?serverTimezone=UTC&characterEncoding=utf8&useUnicode=true&useSSL=true

# 配置 order 表规则
#ds$->{0..1} 指的是ds0 ds1 2个数据库
#order_$->{0..1} 指的是 order_0 order_1 2个表
#ds$->{0..1}.order_$->{0..1} 指的是ds0 ds1 2个数据库下面的order_0和order_1 2个表
#spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_$->{0..15}
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.actual-data-nodes=ds$->{0..1}.xm_shopping_order_$->{0..15}


# https://blog.csdn.net/danielzhou888/article/details/104853954/
#spring.shardingsphere.rules.bindingTables=t_order
spring.shardingsphere.rules.broadcastTables=xm_shopping_order

# 配置分库策略
# user_id 指的是按照userId进行分库
# database-inline 自定义策略名称 下面会用到
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
#spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=database-inline
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.database-strategy.standard.sharding-column=consumer_id
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.database-strategy.standard.sharding-algorithm-name=database-inline
# 配置分表策略
#userId 指的是按照userId进行分表
#table-inline 自定义策略名称 下面会用到
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=user_id
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.table-strategy.standard.sharding-column=consumer_id
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.table-strategy.standard.sharding-algorithm-name=table-inline

# 配置 分片算法
#分库分片算法 取模算法
#ds$->{userId % 2} 指的是userId与2取模
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds$->{user_id % 2}
spring.shardingsphere.rules.sharding.sharding-algorithms.database-inline.props.algorithm-expression=ds$->{consumer_id % 2}


#分表分片算法 取模算法
#ds$->{order_id % 2} 指的是order_id与2取模
spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.type=INLINE
#spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.props.algorithm-expression=t_order_$->{user_id % 16}
spring.shardingsphere.rules.sharding.sharding-algorithms.table-inline.props.algorithm-expression=xm_shopping_order_$->{consumer_id % 16}


# 分片算法配置
#id 生成规则
#snowflake 雪花算法
#spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
#spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=snowflake
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.key-generate-strategy.column=order_id
spring.shardingsphere.rules.sharding.tables.xm_shopping_order.key-generate-strategy.key-generator-name=snowflake

# 分布式序列算法配置
spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=123

# 具体的属性配置
spring.shardingsphere.props.sql-show=true
